// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_test
int rcpp_test();
RcppExport SEXP _hicloudR_rcpp_test() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpp_test());
    return rcpp_result_gen;
END_RCPP
}
// rcpp_readFile
CharacterVector rcpp_readFile(std::string path);
RcppExport SEXP _hicloudR_rcpp_readFile(SEXP pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type path(pathSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_readFile(path));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_updateCalendar
DataFrame rcpp_updateCalendar(DataFrame calendar);
RcppExport SEXP _hicloudR_rcpp_updateCalendar(SEXP calendarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type calendar(calendarSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_updateCalendar(calendar));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_updateNext
StringVector rcpp_updateNext(StringVector vecOld);
RcppExport SEXP _hicloudR_rcpp_updateNext(SEXP vecOldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type vecOld(vecOldSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_updateNext(vecOld));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_tick_data_del_na
void rcpp_tick_data_del_na(DataFrame dt);
RcppExport SEXP _hicloudR_rcpp_tick_data_del_na(SEXP dtSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type dt(dtSEXP);
    rcpp_tick_data_del_na(dt);
    return R_NilValue;
END_RCPP
}
// rcpp_tick_data_add_time_old_version
void rcpp_tick_data_add_time_old_version(DataFrame dt);
RcppExport SEXP _hicloudR_rcpp_tick_data_add_time_old_version(SEXP dtSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type dt(dtSEXP);
    rcpp_tick_data_add_time_old_version(dt);
    return R_NilValue;
END_RCPP
}
// rcpp_tick_data_cal_delta
void rcpp_tick_data_cal_delta(DataFrame dt);
RcppExport SEXP _hicloudR_rcpp_tick_data_cal_delta(SEXP dtSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type dt(dtSEXP);
    rcpp_tick_data_cal_delta(dt);
    return R_NilValue;
END_RCPP
}
// rcpp_updateCZCEInstrumentID
StringVector rcpp_updateCZCEInstrumentID(StringVector tradingday, StringVector oldInstrumentID);
RcppExport SEXP _hicloudR_rcpp_updateCZCEInstrumentID(SEXP tradingdaySEXP, SEXP oldInstrumentIDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type tradingday(tradingdaySEXP);
    Rcpp::traits::input_parameter< StringVector >::type oldInstrumentID(oldInstrumentIDSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_updateCZCEInstrumentID(tradingday, oldInstrumentID));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_simplyCZCEInstrumentID
StringVector rcpp_simplyCZCEInstrumentID(StringVector newInstrumentID);
RcppExport SEXP _hicloudR_rcpp_simplyCZCEInstrumentID(SEXP newInstrumentIDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< StringVector >::type newInstrumentID(newInstrumentIDSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_simplyCZCEInstrumentID(newInstrumentID));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_mbar_from_tick
DataFrame rcpp_mbar_from_tick(DataFrame& tick);
RcppExport SEXP _hicloudR_rcpp_mbar_from_tick(SEXP tickSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type tick(tickSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_mbar_from_tick(tick));
    return rcpp_result_gen;
END_RCPP
}
// rcpp_dbar_from_tick
DataFrame rcpp_dbar_from_tick(DataFrame& tick);
RcppExport SEXP _hicloudR_rcpp_dbar_from_tick(SEXP tickSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame& >::type tick(tickSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_dbar_from_tick(tick));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_hicloudR_rcpp_test", (DL_FUNC) &_hicloudR_rcpp_test, 0},
    {"_hicloudR_rcpp_readFile", (DL_FUNC) &_hicloudR_rcpp_readFile, 1},
    {"_hicloudR_rcpp_updateCalendar", (DL_FUNC) &_hicloudR_rcpp_updateCalendar, 1},
    {"_hicloudR_rcpp_updateNext", (DL_FUNC) &_hicloudR_rcpp_updateNext, 1},
    {"_hicloudR_rcpp_tick_data_del_na", (DL_FUNC) &_hicloudR_rcpp_tick_data_del_na, 1},
    {"_hicloudR_rcpp_tick_data_add_time_old_version", (DL_FUNC) &_hicloudR_rcpp_tick_data_add_time_old_version, 1},
    {"_hicloudR_rcpp_tick_data_cal_delta", (DL_FUNC) &_hicloudR_rcpp_tick_data_cal_delta, 1},
    {"_hicloudR_rcpp_updateCZCEInstrumentID", (DL_FUNC) &_hicloudR_rcpp_updateCZCEInstrumentID, 2},
    {"_hicloudR_rcpp_simplyCZCEInstrumentID", (DL_FUNC) &_hicloudR_rcpp_simplyCZCEInstrumentID, 1},
    {"_hicloudR_rcpp_mbar_from_tick", (DL_FUNC) &_hicloudR_rcpp_mbar_from_tick, 1},
    {"_hicloudR_rcpp_dbar_from_tick", (DL_FUNC) &_hicloudR_rcpp_dbar_from_tick, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_hicloudR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
